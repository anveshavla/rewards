{"ast":null,"code":"var _jsxFileName = \"/Users/anvesh/Documents/Learning/hands on projects/rewards/src/Compute4.js\";\nimport React, { Component } from 'react';\nimport data from './data.json';\nexport default class Compute2 extends React.Component {\n  constructor(props) {\n    super();\n\n    this.groupBy = (data, key) => {\n      return data.reduce((accumulator, current) => {\n        if (current[key] in accumulator) {\n          accumulator[current[key]].push(current);\n        } else {\n          accumulator[current[key]] = [current];\n        }\n\n        return accumulator;\n      }, {});\n    };\n\n    this.addUniqueMonths = () => {\n      var months = new Set();\n      var transaction = '';\n\n      for (transaction in data) {\n        months.add(transaction.month);\n        console.log(transaction.month);\n      }\n    };\n\n    this.addUniqueCustomers = () => {\n      var customers = new Set();\n      var transaction = '';\n\n      for (transaction in data) {\n        customers.add(transaction.customerId);\n        console.log(transaction.customerId);\n      }\n    };\n\n    this.calculate = () => {\n      var months = this.addUniqueMonths();\n      console.log(months);\n      var customers = this.addUniqueCustomers();\n      var result = {};\n      const groupedData = this.groupBy(data, \"customerId\");\n      var customerId = '';\n      var month = '';\n\n      for (customerId in customers) {\n        for (month in months) {\n          result[customerId][month] = 0;\n        }\n      }\n\n      console.log(result);\n      console.log(data);\n      /*\n      console.log(\"final : \",groupedData);\n      for (customerId in groupedData){\n        groupedData[customerId] = this.groupBy(groupedData[customerId],\"month\");\n      }\n      for(customerId in groupedData){\n          var month = ''\n          for(month in groupedData[customerId])\n          {\n            console.log(\"customerId : \", customerId, \"month : \", month, \"data: \", groupedData[customerId][month], \"length : \"+groupedData[customerId][month].length);\n           for(var i =0;i<groupedData[customerId][month].length;i++){\n          var rewards = 0;\n          if(groupedData[customerId][month][i].price>100){\n            rewards = (groupedData[customerId][month][i].price-100) * 2 + 50; \n            }\n          else if(groupedData[customerId][month][i].price>50 && groupedData[customerId][month][i].price<=100){\n            rewards = groupedData[customerId][month][i].price-50\n            }\n            console.log(\"state before : \",result)\n            //rewards = groupedData[customerId][month][i].price;\n          if(customerId in result){ \n            console.log(\"customerId in state: \", customerId, \"state before : \", result);\n               if(month in result[customerId]){\n                console.log(\"month in state: \", month, \"state before : \", result);\n                 \n                result[customerId[0]][month] = result[customerId][0][month] + rewards\n                result[customerId][1].total = result[customerId][1].total + rewards\n                //this.state[customerId][month] =  this.state[customerId][month] + rewards;\n                console.log(\"month in state: \", month, \"state after : \", result);\n               }\n              else{\n                console.log(\"month not in state: \", month, \"state before : \", result);\n                 \n                result[customerId][0][month] = rewards\n                result[customerId][1].total = result[customerId][1].total + rewards;\n               \n                console.log(\"month not in state: \", month, \"state after : \", result);\n               }\n          }\n          else{\n            console.log(\"customerId not in state: \", customerId, \"state before : \", result, \"rewards\", rewards, \"month\", month);\n         \n            \n            result[customerId] = [{[month] : rewards}]\n            result[customerId][1] = {total : rewards}    \n            \n            console.log(\"customerId not in state: \", customerId, \"state after : \", result);\n            \n          }\n          \n          }\n        }\n      }\n       console.log(\"d\" , this.state);*/\n    };\n\n    this.calculate2 = () => {\n      console.log(\"d\", this.state.c1);\n    };\n\n    this.state = {};\n    /*this.state = data*/\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.calculate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, \"Get Price\"), this.state.rewards);\n  }\n\n}","map":{"version":3,"sources":["/Users/anvesh/Documents/Learning/hands on projects/rewards/src/Compute4.js"],"names":["React","Component","data","Compute2","constructor","props","groupBy","key","reduce","accumulator","current","push","addUniqueMonths","months","Set","transaction","add","month","console","log","addUniqueCustomers","customers","customerId","calculate","result","groupedData","calculate2","state","c1","render","rewards"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,eAAe,MAAMC,QAAN,SAAuBH,KAAK,CAACC,SAA7B,CACf;AACIG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd;;AADc,SAMlBC,OANkB,GAMR,CAACJ,IAAD,EAAMK,GAAN,KAAY;AAClB,aAAOL,IAAI,CAACM,MAAL,CAAY,CAACC,WAAD,EAAaC,OAAb,KAAuB;AACzC,YAAGA,OAAO,CAACH,GAAD,CAAP,IAAgBE,WAAnB,EAA+B;AAC3BA,UAAAA,WAAW,CAACC,OAAO,CAACH,GAAD,CAAR,CAAX,CAA0BI,IAA1B,CAA+BD,OAA/B;AACH,SAFD,MAIA;AACID,UAAAA,WAAW,CAACC,OAAO,CAACH,GAAD,CAAR,CAAX,GAA4B,CAACG,OAAD,CAA5B;AACH;;AACD,eAAOD,WAAP;AACA,OATM,EASL,EATK,CAAP;AAUH,KAjBiB;;AAAA,SAmBlBG,eAnBkB,GAmBA,MAAI;AAClB,UAAIC,MAAM,GAAG,IAAIC,GAAJ,EAAb;AACA,UAAIC,WAAW,GAAG,EAAlB;;AACA,WAAIA,WAAJ,IAAmBb,IAAnB,EAAwB;AACpBW,QAAAA,MAAM,CAACG,GAAP,CAAWD,WAAW,CAACE,KAAvB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAW,CAACE,KAAxB;AACH;AACJ,KA1BiB;;AAAA,SA4BlBG,kBA5BkB,GA4BG,MAAI;AACrB,UAAIC,SAAS,GAAG,IAAIP,GAAJ,EAAhB;AACA,UAAIC,WAAW,GAAG,EAAlB;;AACA,WAAIA,WAAJ,IAAmBb,IAAnB,EAAwB;AACpBmB,QAAAA,SAAS,CAACL,GAAV,CAAcD,WAAW,CAACO,UAA1B;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAW,CAACO,UAAxB;AACH;AACJ,KAnCiB;;AAAA,SAqClBC,SArCkB,GAqCN,MAAM;AAEhB,UAAIV,MAAM,GAAG,KAAKD,eAAL,EAAb;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACA,UAAIQ,SAAS,GAAG,KAAKD,kBAAL,EAAhB;AACA,UAAII,MAAM,GAAG,EAAb;AACA,YAAMC,WAAW,GAAG,KAAKnB,OAAL,CAAaJ,IAAb,EAAmB,YAAnB,CAApB;AAEA,UAAIoB,UAAU,GAAG,EAAjB;AACA,UAAIL,KAAK,GAAI,EAAb;;AACA,WAAKK,UAAL,IAAmBD,SAAnB,EAA6B;AACzB,aAAIJ,KAAJ,IAAaJ,MAAb,EAAoB;AAClBW,UAAAA,MAAM,CAACF,UAAD,CAAN,CAAmBL,KAAnB,IAA4B,CAA5B;AACD;AACJ;;AAEDC,MAAAA,OAAO,CAACC,GAAR,CAAYK,MAAZ;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DD,KApHiB;;AAAA,SAqHlBwB,UArHkB,GAqHL,MAAI;AACbR,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAkB,KAAKQ,KAAL,CAAWC,EAA7B;AACH,KAvHiB;;AAEd,SAAKD,KAAL,GAAa,EAAb;AACE;;AAAqB;AAC1B;;AAqHDE,EAAAA,MAAM,GAAE;AACJ,wBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,OAAO,EAAE,KAAKN,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEK,KAAKI,KAAL,CAAWG,OAFhB,CADA;AAKH;;AAhIL","sourcesContent":["import React, {Component} from 'react';\nimport data from './data.json';\n\nexport default class Compute2 extends React.Component\n{\n    constructor(props){\n        super();\n        this.state = {};\n          /*this.state = data*/;          \n    }\n\n    groupBy = (data,key)=>{\n        return data.reduce((accumulator,current)=>{\n         if(current[key] in accumulator){\n             accumulator[current[key]].push(current)\n         }\n         else\n         {\n             accumulator[current[key]] = [current]\n         }\n         return accumulator;\n        },{});\n    }\n\n    addUniqueMonths = ()=>{\n        var months = new Set();\n        var transaction = '';\n        for(transaction in data){\n            months.add(transaction.month)\n            console.log(transaction.month)\n        } \n    }\n\n    addUniqueCustomers = ()=>{\n        var customers = new Set();\n        var transaction = '';\n        for(transaction in data){\n            customers.add(transaction.customerId)\n            console.log(transaction.customerId)\n        }     \n    }\n    \n    calculate = () => { \n      \n      var months = this.addUniqueMonths();\n      console.log(months);  \n      var customers = this.addUniqueCustomers();\n      var result = {};\n      const groupedData = this.groupBy(data, \"customerId\");\n\n      var customerId = '';\n      var month =  ''; \n      for (customerId in customers){\n          for(month in months){\n            result[customerId][month] = 0\n          }\n      }\n      \n      console.log(result);\n      console.log(data);\n      /*\n      console.log(\"final : \",groupedData);\n      for (customerId in groupedData){\n        groupedData[customerId] = this.groupBy(groupedData[customerId],\"month\");\n      }\n      for(customerId in groupedData){\n          var month = ''\n          for(month in groupedData[customerId])\n          {\n            console.log(\"customerId : \", customerId, \"month : \", month, \"data: \", groupedData[customerId][month], \"length : \"+groupedData[customerId][month].length);\n\n          for(var i =0;i<groupedData[customerId][month].length;i++){\n          var rewards = 0;\n          if(groupedData[customerId][month][i].price>100){\n            rewards = (groupedData[customerId][month][i].price-100) * 2 + 50; \n            }\n          else if(groupedData[customerId][month][i].price>50 && groupedData[customerId][month][i].price<=100){\n            rewards = groupedData[customerId][month][i].price-50\n            }\n            console.log(\"state before : \",result)\n            //rewards = groupedData[customerId][month][i].price;\n          if(customerId in result){ \n            console.log(\"customerId in state: \", customerId, \"state before : \", result);\n\n              if(month in result[customerId]){\n                console.log(\"month in state: \", month, \"state before : \", result);\n\n                \n                result[customerId[0]][month] = result[customerId][0][month] + rewards\n                result[customerId][1].total = result[customerId][1].total + rewards\n                //this.state[customerId][month] =  this.state[customerId][month] + rewards;\n                console.log(\"month in state: \", month, \"state after : \", result);\n\n              }\n              else{\n                console.log(\"month not in state: \", month, \"state before : \", result);\n\n                \n                result[customerId][0][month] = rewards\n                result[customerId][1].total = result[customerId][1].total + rewards;\n               \n                console.log(\"month not in state: \", month, \"state after : \", result);\n\n              }\n          }\n          else{\n            console.log(\"customerId not in state: \", customerId, \"state before : \", result, \"rewards\", rewards, \"month\", month);\n         \n            \n            result[customerId] = [{[month] : rewards}]\n            result[customerId][1] = {total : rewards}    \n            \n            console.log(\"customerId not in state: \", customerId, \"state after : \", result);\n            \n          }\n          \n          }\n        }\n      }\n\n      console.log(\"d\" , this.state);*/\n    }\n    calculate2 = ()=>{\n        console.log(\"d\" , this.state.c1);\n    }\n\n    render(){\n        return (\n        <div>\n            <button onClick={this.calculate}>Get Price</button>    \n            {this.state.rewards}</div>\n        );\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}