{"ast":null,"code":"var _jsxFileName = \"/Users/anvesh/Documents/Learning/hands on projects/rewards/src/Compute.js\";\nimport React, { Component } from 'react';\nimport data from './data.json';\nexport default class Compute extends React.Component {\n  constructor(props) {\n    super();\n\n    this.groupBy = (data, key) => {\n      return data.reduce((accumulator, current) => {\n        if (current[key] in accumulator) {\n          accumulator[current[key]].push(current);\n        } else {\n          accumulator[current[key]] = [current];\n        }\n\n        return accumulator;\n      }, {});\n    };\n\n    this.calculate = () => {\n      const groupedData = this.groupBy(data, \"customerId\");\n      var customerId = '';\n\n      for (customerId in groupedData) {\n        groupedData[customerId] = this.groupBy(groupedData[customerId], \"month\");\n        console.log(\"obj + \", groupedData[customerId]);\n      }\n\n      console.log(\"final : \", groupedData);\n\n      for (customerId in groupedData) {\n        var month = '';\n\n        for (month in groupedData[customerId]) {\n          console.log(\"reards\", groupedData[customerId][month][i].price);\n          console.log(\"customerId : \", customerId, \"month : \", customerId, \"data: \", groupedData[customerId][month]);\n\n          for (var i = 0; i < month.length; i++) {\n            var rewards = 0;\n\n            if (groupedData[customerId][month][i].price > 100) {\n              rewards = (groupedData[customerId][month][i].price - 100) * 2 + 50;\n            } else if (groupedData[customerId][month].price > 50 && groupedData[customerId][month].price <= 100) {\n              rewards = groupedData[customerId][month][i].price - 50;\n            }\n\n            console.log(\"reards\", groupedData[customerId][month][i].price);\n\n            if (customerId in this.state) {\n              if (month in this.state[customerId]) {\n                this.setState({\n                  [customerId]: {\n                    [month]: this.state[customerId][month] + rewards,\n                    total: this.state[customerId].total + rewards\n                  }\n                }); //this.state[customerId][month] =  this.state[customerId][month] + rewards;\n              } else {\n                this.setState({\n                  [customerId]: {\n                    [month]: rewards,\n                    total: this.state[customerId].total + rewards\n                  }\n                }); //this.state[customerId][month] =  rewards;\n              }\n            } else {\n              this.setState({\n                [customerId]: {\n                  [month]: rewards,\n                  total: 0\n                } //\"customerId\" : \"a\"\n\n              }); //this.state[customerId][month] =  rewards;  \n            } //this.state[customerId].total = this.state[customerId].total+ rewards;\n\n          }\n        }\n      }\n      /*for(x in groupedData){\n        if(this.state.price>100){\n            this.setState({rewards : (this.state.price-100) * 2 + 50}); \n        }\n        else if(this.state.price>50 && this.state.price<=100){\n            this.setState({rewards : this.state.price-50});\n        }\n      }*/\n\n\n      console.log(\"d\", this.state);\n    };\n\n    this.calculate2 = () => {\n      console.log(\"d\", this.state.c1);\n    };\n\n    this.state = {};\n    /*this.state = data*/\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.calculate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, \"Get Price\"), this.state.rewards);\n  }\n\n}","map":{"version":3,"sources":["/Users/anvesh/Documents/Learning/hands on projects/rewards/src/Compute.js"],"names":["React","Component","data","Compute","constructor","props","groupBy","key","reduce","accumulator","current","push","calculate","groupedData","customerId","console","log","month","i","price","length","rewards","state","setState","total","calculate2","c1","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport data from './data.json';\n\nexport default class Compute extends React.Component\n{\n    constructor(props){\n        super();\n        this.state = {};\n          /*this.state = data*/;          \n    }\n\n    groupBy = (data,key)=>{\n        return data.reduce((accumulator,current)=>{\n         if(current[key] in accumulator){\n             accumulator[current[key]].push(current)\n         }\n         else\n         {\n             accumulator[current[key]] = [current]\n         }\n         return accumulator;\n        },{});\n    }\n\n    calculate = () => { \n      const groupedData = this.groupBy(data, \"customerId\");\n      var customerId = ''\n      for (customerId in groupedData){\n        groupedData[customerId] = this.groupBy(groupedData[customerId],\"month\");\n        console.log(\"obj + \", groupedData[customerId]);\n      }\n      console.log(\"final : \",groupedData);\n      \n      for(customerId in groupedData){\n          var month = ''\n          for(month in groupedData[customerId])\n          {\n            console.log(\"reards\",groupedData[customerId][month][i].price);\n          console.log(\"customerId : \", customerId, \"month : \", customerId, \"data: \", groupedData[customerId][month]);\n          for(var i =0;i<month.length;i++){\n          var rewards = 0\n          if(groupedData[customerId][month][i].price>100){\n            rewards = (groupedData[customerId][month][i].price-100) * 2 + 50; \n            }\n          else if(groupedData[customerId][month].price>50 && groupedData[customerId][month].price<=100){\n            rewards = groupedData[customerId][month][i].price-50\n            }\n\n            console.log(\"reards\",groupedData[customerId][month][i].price);\n          if(customerId in this.state){ \n              if(month in this.state[customerId]){\n\n                this.setState({\n                    [customerId] : {[month] : this.state[customerId][month] + rewards, total : this.state[customerId].total + rewards}\n                })\n                //this.state[customerId][month] =  this.state[customerId][month] + rewards;\n              }\n              else{\n                this.setState({\n                    [customerId] : {[month] : rewards, total : this.state[customerId].total + rewards}\n                })  \n                //this.state[customerId][month] =  rewards;\n              }\n          }\n          else{\n            this.setState({\n                [customerId] : {[month] : rewards, total : 0}\n                \n                //\"customerId\" : \"a\"\n            }) \n            //this.state[customerId][month] =  rewards;  \n          }\n          \n            //this.state[customerId].total = this.state[customerId].total+ rewards;\n          }\n        }\n      }\n\n      /*for(x in groupedData){\n        if(this.state.price>100){\n            this.setState({rewards : (this.state.price-100) * 2 + 50}); \n        }\n        else if(this.state.price>50 && this.state.price<=100){\n            this.setState({rewards : this.state.price-50});\n        }\n      }*/\n      console.log(\"d\" , this.state);\n    }\n    calculate2 = ()=>{\n        console.log(\"d\" , this.state.c1);\n    }\n\n    render(){\n        return (\n        <div>\n            <button onClick={this.calculate}>Get Price</button>    \n            {this.state.rewards}</div>\n        );\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}