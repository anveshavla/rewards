{"ast":null,"code":"var _jsxFileName = \"/Users/anvesh/Documents/Learning/hands on projects/rewards/src/Compute4.js\";\nimport React, { Component } from 'react';\nimport data from './data.json';\nexport default class Compute2 extends React.Component {\n  constructor(props) {\n    super();\n\n    this.groupBy = (data, key) => {\n      return data.reduce((accumulator, current) => {\n        if (current[key] in accumulator) {\n          accumulator[current[key]].push(current);\n        } else {\n          accumulator[current[key]] = [current];\n        }\n\n        return accumulator;\n      }, {});\n    };\n\n    this.addUniqueMonths = () => {\n      var months = new Set();\n      var transaction = '';\n\n      for (var i = 0; i < data.length; i++) {\n        months.add(data[i].month);\n      }\n\n      return months;\n    };\n\n    this.addUniqueCustomers = () => {\n      var customers = new Set();\n      var transaction = '';\n\n      for (var i = 0; i < data.length; i++) {\n        customers.add(data[i].customerId);\n      }\n\n      return customers;\n    };\n\n    this.calculate = () => {\n      var months = Array.from(this.addUniqueMonths()).sort();\n      console.log(\"months sorted : \", months.sort());\n      var m = ['b', 'c', 'a'];\n      var k = months;\n      console.log(k.sort());\n      var customers = Array.from(this.addUniqueCustomers());\n      var result = {};\n      const groupedData = this.groupBy(data, \"customerId\");\n      var customerId = '';\n      var month = '';\n      console.log(\"cl \", customers.length);\n      console.log(\"ml \", months.length);\n\n      for (var i = 0; i < customers.length; i++) {\n        result[customers[i]] = [];\n        result[customers[i]][0] = {};\n        result[customers[i]][1] = {};\n\n        for (var j = 0; j < months.length; j++) {\n          /*result[c1] = [];\n          result[c1][0]={};\n          result[c1][1] = {}\n          result[c1][0][a] = 0;\n          result[c1][0][b] = 1;\n          \n          result[c1][1].total = 0;*/\n          result[customers[i]][0][months[j]] = 0;\n          result[customers[i]][1].total = 0;\n          console.log(\"customers : \", customers[i], \" month : \", months[j]); //result[customers[i]][months[j]] = 0\n\n          console.log(\"test \", customers[i], \"    \", months[j]);\n          console.log(\"result in : \", result);\n        }\n      }\n\n      console.log(\"result : \", result);\n      /*\n      console.log(\"final : \",groupedData);\n      for (customerId in groupedData){\n        groupedData[customerId] = this.groupBy(groupedData[customerId],\"month\");\n      }\n      for(customerId in groupedData){\n          var month = ''\n          for(month in groupedData[customerId])\n          {\n            console.log(\"customerId : \", customerId, \"month : \", month, \"data: \", groupedData[customerId][month], \"length : \"+groupedData[customerId][month].length);\n           for(var i =0;i<groupedData[customerId][month].length;i++){\n          var rewards = 0;\n          if(groupedData[customerId][month][i].price>100){\n            rewards = (groupedData[customerId][month][i].price-100) * 2 + 50; \n            }\n          else if(groupedData[customerId][month][i].price>50 && groupedData[customerId][month][i].price<=100){\n            rewards = groupedData[customerId][month][i].price-50\n            }\n            console.log(\"state before : \",result)\n            //rewards = groupedData[customerId][month][i].price;\n          if(customerId in result){ \n            console.log(\"customerId in state: \", customerId, \"state before : \", result);\n               if(month in result[customerId]){\n                console.log(\"month in state: \", month, \"state before : \", result);\n                 \n                result[customerId[0]][month] = result[customerId][0][month] + rewards\n                result[customerId][1].total = result[customerId][1].total + rewards\n                //this.state[customerId][month] =  this.state[customerId][month] + rewards;\n                console.log(\"month in state: \", month, \"state after : \", result);\n               }\n              else{\n                console.log(\"month not in state: \", month, \"state before : \", result);\n                 \n                result[customerId][0][month] = rewards\n                result[customerId][1].total = result[customerId][1].total + rewards;\n               \n                console.log(\"month not in state: \", month, \"state after : \", result);\n               }\n          }\n          else{\n            console.log(\"customerId not in state: \", customerId, \"state before : \", result, \"rewards\", rewards, \"month\", month);\n         \n            \n            result[customerId] = [{[month] : rewards}]\n            result[customerId][1] = {total : rewards}    \n            \n            console.log(\"customerId not in state: \", customerId, \"state after : \", result);\n            \n          }\n          \n          }\n        }\n      }\n       console.log(\"d\" , this.state);*/\n    };\n\n    this.calculate2 = () => {\n      console.log(\"d\", this.state.c1);\n    };\n\n    this.state = {};\n    /*this.state = data*/\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.calculate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }, \"Get Price\"), this.state.rewards);\n  }\n\n}","map":{"version":3,"sources":["/Users/anvesh/Documents/Learning/hands on projects/rewards/src/Compute4.js"],"names":["React","Component","data","Compute2","constructor","props","groupBy","key","reduce","accumulator","current","push","addUniqueMonths","months","Set","transaction","i","length","add","month","addUniqueCustomers","customers","customerId","calculate","Array","from","sort","console","log","m","k","result","groupedData","j","total","calculate2","state","c1","render","rewards"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport data from './data.json';\n\nexport default class Compute2 extends React.Component\n{\n    constructor(props){\n        super();\n        this.state = {};\n          /*this.state = data*/;          \n    }\n\n    groupBy = (data,key)=>{\n        return data.reduce((accumulator,current)=>{\n         if(current[key] in accumulator){\n             accumulator[current[key]].push(current)\n         }\n         else\n         {\n             accumulator[current[key]] = [current]\n         }\n         return accumulator;\n        },{});\n    }\n\n    addUniqueMonths = ()=>{\n        var months = new Set();\n        var transaction = '';\n        \n\n        for(var i =0; i<data.length; i++){\n            months.add(data[i].month)\n        } \n        return months;\n    }\n\n    addUniqueCustomers = ()=>{\n        var customers = new Set();\n        var transaction = '';\n        for(var i =0; i<data.length; i++){\n            customers.add(data[i].customerId)\n        }\n        return customers;     \n    }\n    \n    calculate = () => { \n      \n      var months = Array.from(this.addUniqueMonths()).sort();\n      console.log(\"months sorted : \",months.sort());  \n      var m = ['b','c','a']\n      var k = months;\n      console.log(k.sort());\n      var customers = Array.from(this.addUniqueCustomers());\n      var result = {};\n      const groupedData = this.groupBy(data, \"customerId\");\n\n      var customerId = '';\n      var month =  ''; \n      console.log(\"cl \",customers.length)\n      console.log(\"ml \",months.length)\n\n      for (var i=0; i<customers.length; i++){\n        result[customers[i]] = []\n            result[customers[i]][0] = {}\n            result[customers[i]][1] = {}\n           \n          for(var j=0; j<months.length; j++){\n\n            /*result[c1] = [];\n            result[c1][0]={};\n            result[c1][1] = {}\n            result[c1][0][a] = 0;\n            result[c1][0][b] = 1;\n            \n            result[c1][1].total = 0;*/\n\n\n             result[customers[i]][0][months[j]] = 0;\n            result[customers[i]][1].total = 0;\n\n            console.log(\"customers : \",customers[i],\" month : \",months[j]);\n            //result[customers[i]][months[j]] = 0\n            console.log(\"test \", customers[i],\"    \",months[j]);\n            console.log(\"result in : \", result);\n          }\n      }\n      console.log(\"result : \", result);\n      /*\n      console.log(\"final : \",groupedData);\n      for (customerId in groupedData){\n        groupedData[customerId] = this.groupBy(groupedData[customerId],\"month\");\n      }\n      for(customerId in groupedData){\n          var month = ''\n          for(month in groupedData[customerId])\n          {\n            console.log(\"customerId : \", customerId, \"month : \", month, \"data: \", groupedData[customerId][month], \"length : \"+groupedData[customerId][month].length);\n\n          for(var i =0;i<groupedData[customerId][month].length;i++){\n          var rewards = 0;\n          if(groupedData[customerId][month][i].price>100){\n            rewards = (groupedData[customerId][month][i].price-100) * 2 + 50; \n            }\n          else if(groupedData[customerId][month][i].price>50 && groupedData[customerId][month][i].price<=100){\n            rewards = groupedData[customerId][month][i].price-50\n            }\n            console.log(\"state before : \",result)\n            //rewards = groupedData[customerId][month][i].price;\n          if(customerId in result){ \n            console.log(\"customerId in state: \", customerId, \"state before : \", result);\n\n              if(month in result[customerId]){\n                console.log(\"month in state: \", month, \"state before : \", result);\n\n                \n                result[customerId[0]][month] = result[customerId][0][month] + rewards\n                result[customerId][1].total = result[customerId][1].total + rewards\n                //this.state[customerId][month] =  this.state[customerId][month] + rewards;\n                console.log(\"month in state: \", month, \"state after : \", result);\n\n              }\n              else{\n                console.log(\"month not in state: \", month, \"state before : \", result);\n\n                \n                result[customerId][0][month] = rewards\n                result[customerId][1].total = result[customerId][1].total + rewards;\n               \n                console.log(\"month not in state: \", month, \"state after : \", result);\n\n              }\n          }\n          else{\n            console.log(\"customerId not in state: \", customerId, \"state before : \", result, \"rewards\", rewards, \"month\", month);\n         \n            \n            result[customerId] = [{[month] : rewards}]\n            result[customerId][1] = {total : rewards}    \n            \n            console.log(\"customerId not in state: \", customerId, \"state after : \", result);\n            \n          }\n          \n          }\n        }\n      }\n\n      console.log(\"d\" , this.state);*/\n    }\n    calculate2 = ()=>{\n        console.log(\"d\" , this.state.c1);\n    }\n\n    render(){\n        return (\n        <div>\n            <button onClick={this.calculate}>Get Price</button>    \n            {this.state.rewards}</div>\n        );\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}